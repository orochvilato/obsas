# -*- coding: utf-8 -*-
# essayez quelque chose comme
# TODO : page député les scrutins avec votes identiques FI/EM doivent apparaitre de la couleur du groupe du député si EM/FI


def gauges():
    return dict()


def index():
    return dict(message="hello from fiches.py")
import json

def test():
    deplist = ["PA605036", "PA719866", "PA720242", "PA719146", "PA722038", "PA721036", "PA718954", "PA605963", "PA724827", "PA720798", "PA720124", "PA721278", "PA606675", "PA721158", "PA719318", "PA719100", "PA720310", "PA722190", "PA609726", "PA719806", "PA588884", "PA721624", "PA642764", "PA610634", "PA719770", "PA718744", "PA721776", "PA719558", "PA720256", "PA642724", "PA610681", "PA721836", "PA721046", "PA335999", "PA342415", "PA721522", "PA642847", "PA718884", "PA722170", "PA720210", "PA642935", "PA720362", "PA441", "PA720968", "PA332228", "PA722046", "PA720430", "PA719488", "PA719218", "PA718876", "PA722312", "PA508", "PA720822", "PA718990", "PA719024", "PA608641", "PA720576", "PA720162", "PA721344", "PA721410", "PA718756", "PA266793", "PA719980", "PA642695", "PA721816", "PA336316", "PA606507", "PA267233", "PA608083", "PA721608", "PA722030", "PA719032", "PA718710", "PA330684", "PA721908", "PA713448", "PA330008", "PA267766", "PA605069", "PA672", "PA721336", "PA223837", "PA721118", "PA720772", "PA721328", "PA719890", "PA718838", "PA720546", "PA720116", "PA722000", "PA689", "PA720622", "PA719496", "PA721750", "PA720298", "PA429893", "PA746", "PA719138", "PA720520", "PA767", "PA719922", "PA721352", "PA721166", "PA719472", "PA720814", "PA719440", "PA721860", "PA719748", "PA719790", "PA719448", "PA721218", "PA719170", "PA267306", "PA719250", "PA720468", "PA856", "PA722126", "PA642868", "PA267429", "PA330240", "PA702054", "PA719294", "PA336439", "PA719756", "PA719740", "PA719814", "PA606212", "PA719286", "PA721202", "PA721210", "PA718850", "PA719118", "PA722390", "PA923", "PA719624", "PA721808", "PA719266", "PA942", "PA719194", "PA720932", "PA332523", "PA720268", "PA607155", "PA998", "PA1008", "PA719710", "PA720538", "PA1029", "PA721398", "PA718694", "PA267450", "PA719258", "PA267241", "PA719830", "PA720598", "PA720696", "PA330909", "PA720862", "PA718926", "PA720386", "PA720438", "PA267440", "PA722382", "PA712015", "PA722236", "PA721718", "PA718894", "PA267289", "PA608292", "PA719162", "PA342935", "PA719660", "PA719684", "PA720154", "PA608826", "PA720046", "PA718720", "PA606202", "PA721194", "PA1198", "PA720684", "PA721094", "PA643175", "PA1206", "PA330357", "PA720652", "PA267735", "PA331567", "PA719310", "PA721670", "PA332747", "PA717151", "PA721924", "PA1012", "PA720996", "PA720002", "PA719692", "PA720924", "PA607193", "PA719044", "PA719616", "PA720664", "PA719570", "PA721564", "PA605694", "PA1276", "PA334149", "PA721896", "PA609332", "PA719960", "PA721702", "PA267042", "PA606171", "PA643103", "PA719938", "PA720286", "PA722134", "PA267780", "PA721742", "PA267673", "PA718706", "PA721384", "PA1327", "PA721142", "PA720030", "PA722284", "PA722366", "PA266774", "PA719480", "PA721246", "PA720198", "PA721992", "PA720178", "PA333285", "PA722358", "PA267324", "PA721364", "PA720806", "PA721024", "PA605991", "PA719108", "PA719326", "PA720222", "PA267336", "PA718674", "PA1498", "PA610775", "PA721784", "PA266797", "PA721296", "PA720560", "PA719330", "PA720170", "PA722062", "PA720790", "PA721764", "PA267318", "PA721792", "PA721498", "PA721880", "PA721126", "PA1592", "PA695100", "PA722054", "PA719652", "PA720326", "PA720054", "PA722094", "PA722070", "PA1630", "PA718794", "PA267355", "PA608416", "PA721150", "PA720454", "PA722150", "PA719700", "PA333818", "PA267200", "PA331835", "PA722374", "PA1695", "PA720354", "PA719874", "PA720074", "PA267801", "PA719060", "PA719778", "PA719210", "PA720038", "PA332614", "PA722344", "PA722202", "PA267901", "PA719994", "PA335054", "PA719372", "PA721514", "PA719230", "PA719052", "PA719186", "PA722300", "PA721644", "PA605084", "PA720202", "PA720214", "PA721506", "PA719842", "PA719798", "PA720846", "PA609245", "PA268019", "PA719504", "PA719918", "PA721004", "PA1809", "PA605518", "PA643205", "PA718978", "PA721434", "PA718868", "PA267785", "PA719396", "PA1838", "PA720764", "PA721984", "PA720022", "PA720916", "PA719728", "PA719412", "PA588886", "PA1874", "PA719404", "PA721466", "PA345722", "PA719388", "PA720342", "PA720614", "PA719006", "PA721852", "PA722228", "PA340853", "PA720480", "PA335612", "PA712014", "PA722008", "PA722320", "PA721450", "PA1960", "PA721134", "PA337483", "PA267378", "PA719858", "PA720378", "PA720446", "PA721054", "PA718918", "PA608016", "PA721530", "PA606712", "PA722244", "PA720230", "PA717379", "PA719718", "PA722178", "PA720988", "PA346054", "PA334116", "PA721946", "PA606098", "PA2086", "PA719080", "PA719154", "PA720146", "PA346218", "PA720976", "PA721800", "PA720728", "PA721726", "PA677483", "PA720870", "PA719338", "PA2150", "PA719608", "PA720370", "PA2155", "PA719072", "PA719640", "PA719272", "PA719882", "PA719130", "PA721734", "PA720738", "PA721418", "PA721976", "PA720630", "PA719668", "PA719952", "PA607619", "PA719456", "PA719242", "PA266788", "PA721876", "PA719850", "PA720908", "PA721254", "PA721656", "PA719464", "PA721486", "PA610654", "PA719520", "PA720644", "PA721956", "PA719364", "PA721960", "PA720108", "PA720278", "PA720492", "PA720334", "PA720606", "PA720402", "PA333421", "PA719632", "PA720892", "PA721636", "PA719202", "PA720944", "PA335532", "PA718784", "PA607595", "PA719946", "PA718802", "PA720414", "PA2377", "PA721568", "PA718930", "PA721182", "PA721234", "PA720500", "PA721270", "PA718736", "PA721710", "PA721372", "PA720512", "PA336175", "PA608172", "PA721844", "PA718910", "PA267260", "PA693008", "PA609520", "PA2449", "PA719528", "PA607553", "PA720590", "PA720720", "PA719600", "PA721916", "PA720100", "PA719578", "PA608011", "PA405480", "PA720422", "PA2492", "PA643127", "PA609590", "PA718944", "PA721286", "PA721070", "PA720092", "PA721888", "PA721062", "PA720552", "PA722398", "PA721678", "PA266776", "PA2529", "PA721824", "PA719676", "PA330788", "PA335758", "PA720900", "PA721426", "PA720066", "PA722252", "PA718810", "PA610733", "PA266808", "PA722022", "PA721458", "PA721600", "PA343493", "PA718902", "PA720692", "PA721226", "PA722292", "PA722142", "PA721616", "PA267527", "PA702052", "PA720878", "PA720138", "PA721110", "PA719972", "PA340343", "PA722078", "PA721314", "PA720780", "PA267204", "PA720960", "PA610667", "PA719592", "PA346876", "PA719420", "PA721174", "PA720190", "PA334654", "PA720754", "PA722118", "PA267794", "PA720952", "PA719350", "PA721690", "PA719550", "PA722086", "PA2792", "PA718860", "PA2796", "PA721584", "PA720854", "PA722336", "PA720568", "PA719822", "PA720830", "PA719302", "PA720014", "PA334768", "PA2828", "PA719540", "PA718780", "PA720394", "PA718682", "PA719092", "PA722162", "PA608695", "PA643145", "PA643134", "PA718768", "PA719930", "PA267622", "PA718728", "PA720586", "PA642788", "PA267585", "PA334843", "PA721542", "PA709315", "PA721968", "PA720704", "PA722102", "PA607090", "PA331582", "PA606639", "PA719512", "PA722260", "PA421348", "PA721474", "PA721262", "PA2952", "PA720746", "PA2960", "PA722268", "PA722110", "PA720318", "PA718962", "PA267330"]
    return json.dumps([(a['uid'],a['nomcomplet']) for a in mdb.acteurs.find({'uid':{'$nin':deplist}})])
    act = mdb.acteurs.find_one({'uid':'PA2150'})
    del act['_id']
    return json.dumps(act,sort_keys=True, indent=4, separators=(',', ': '))
    return json.dumps(mdb.acteurs.find_one({'$and':[ {'deputywatch':{'$ne':None}},{'hatvp':{'$ne':[]}}]})['rankings'])
def scrutin():
    vpositions = ['pour','contre','abstention']
    id = request.vars.get('id','welou')
    scrutin = mdb.scrutins.find_one({'scrutin_id':id})

    if not scrutin:
        redirect(URL(c='default',f='notfound'))
    
    posorder = [ scrutin['votefi'] ]
    groupes = [(g['libelleAbrev'],g['libelle'],g['nbmembres']) for g in mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]})]
    if (scrutin['votefi']!=scrutin['voteem']):
        posorder.append(scrutin['voteem'])
    for p in vpositions:
        if not p in posorder:
            posorder.append(p)
            
    for v in mdb.votes.find({'scrutin_id':id}):
        gp = v['groupeabrev']
        if not 'votes' in scrutin['vote'][gp]:
            scrutin['vote'][gp]['votes'] = []
        if v['position'] in vpositions and v['position']!=scrutin['vote'][gp]['sort']:
            if v['position']==scrutin['votefi']:
                cat = "votefi"
            elif v['position']==scrutin['voteem']:
                cat = "voteem"
            else:
                cat = "autre"
            scrutin['vote'][gp]['votes'].append((v['uid'],v['nom'],cat,v['position']))
            
                
    if 'amendement' in scrutin['scrutin_desc'][:13]:
        scrutin['typedetail'] = 'amendement'
    elif scrutin['scrutin_desc'][:9] =="la motion":
        scrutin['typedetail'] = 'motion'
    elif scrutin['scrutin_desc'][:27] =="l'ensemble du projet de loi":
        scrutin['typedetail'] = 'loi'
    elif scrutin['scrutin_desc'][:9] =="l'article":
        scrutin['typedetail'] = 'article'
    elif scrutin['scrutin_desc'][:14] ==u'la déclaration':
        scrutin['typedetail'] = 'declaration'
    else:
        scrutin['typedetail'] = 'autre'
    scrutin['sort'] = 'adopté' if scrutin['vote']['assemblee']['sort']=='pour' else 'rejeté'
    for g in scrutin['vote'].keys():
        if scrutin['vote'][g]['total_votants']==0:
            scrutin['vote'][g]['stats'] = {'exprimepct':(0,0,0),'votefipct':(0,0,0),'voteempct':(0,0,0),'disspct':(0,0,0)}
        else:
            scrutin['vote'][g]['stats'] = {
            'exprimepct': (scrutin['vote'][g]['total_votants'],scrutin['vote'][g]['total'],int(100*float(scrutin['vote'][g]['total_votants'])/scrutin['vote'][g]['total'])),
            'votefipct': (scrutin['vote'][g][scrutin['votefi']],scrutin['vote'][g]['total_votants'],int(100*float(scrutin['vote'][g][scrutin['votefi']])/scrutin['vote'][g]['total_votants'])),
            'voteempct': (scrutin['vote'][g][scrutin['voteem']],scrutin['vote'][g]['total_votants'],int(100*float(scrutin['vote'][g][scrutin['voteem']])/scrutin['vote'][g]['total_votants'])),
            'disspct': (scrutin['vote'][g]['total_votants']-scrutin['vote'][g][scrutin['vote'][g]['sort']],scrutin['vote'][g]['total_votants'],int(100*float(scrutin['vote'][g]['total_votants']-scrutin['vote'][g][scrutin['vote'][g]['sort']])/scrutin['vote'][g]['total_votants']))
            }
    return dict(scrutin=scrutin, groupes=groupes)



def suivifi():
    groupes = [(g['libelleAbrev'],g['libelle'],g['nbmembres']) for g in mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]})]
    suivi = {}
    scrutins = sorted(mdb.scrutins.find(),key=lambda x:x['scrutin_num'])
    nuls = [ i for i,s in enumerate(scrutins) if s['votefi']==s['voteem']]
    for g,lib,nbm in groupes:
        suivi[g] = {}
        suivi[g]['votefi'] = []
        suivi[g]['voteem'] = []
        for i,s in enumerate(scrutins):
             suivi[g]['votefi'].append(s['vote'][g][s['votefi']] if s['votefi']!=s['voteem'] else 0)
             
              
    return dict(groupes=groupes,suivi=suivi,scrutins=scrutins,nuls=nuls,legende="Nombre de votants exprimés FI-compatibles - par scrutins")

def suivi():
    groupes = [(g['libelleAbrev'],g['libelle'],g['nbmembres']) for g in mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]})] + [('assemblee','Assemblée',577)]
    suivi = {}
    scrutins = sorted(mdb.scrutins.find(),key=lambda x:x['scrutin_num'])
    nuls = [ 1 if s['votefi']==s['voteem'] else 0 for i,s in enumerate(scrutins) ]
    for g,lib,nbm in groupes:
        suivi[g] = {}
        suivi[g]['votefi'] = []
        suivi[g]['voteem'] = []
        for i,s in enumerate(scrutins):
             suivi[g]['votefi'].append(s['vote'][g][s['votefi']])
             
              
    return dict(groupes=groupes,suivi=suivi,scrutins=scrutins,nuls=nuls,legende="Nombre de votants exprimés FI-compatibles - par scrutins")

def suivipct():
    groupes = [(g['libelleAbrev'],g['libelle'],g['nbmembres']) for g in mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]})] + [('assemblee','Assemblée',577)]
    suivi = {}
    scrutins = sorted(mdb.scrutins.find(),key=lambda x:x['scrutin_num'])
    nuls = [ 1 if s['votefi']==s['voteem'] else 0 for i,s in enumerate(scrutins) ]
    for g,lib,nbm in groupes:
        suivi[g] = {}
        suivi[g]['votefi'] = []
        suivi[g]['voteem'] = []
        for i,s in enumerate(scrutins):
             suivi[g]['votefi'].append(100*float(s['vote'][g][s['votefi']])/nbm)
             
              
    return dict(groupes=groupes,suivi=suivi,scrutins=scrutins,nuls=nuls,legende="% de votants exprimés FI-compatibles - par scrutins")

        
def deputes():
    deps = list(mdb.acteurs.find())
    
    return dict(deputes=deps)


def circo():
    deps = list(mdb.acteurs.find())
    return dict(deputes=deps)



def depute():
    a_id = request.vars.get('uid','welou')
    dep = mdb.acteurs.find_one({'uid':a_id})

    if not dep:
        redirect(URL(c='default',f='notfound'))
    del dep['_id']
    votes = mdb.votes.find({'uid':a_id})
    positions = {}
    positions_ori = {}
    dossiers= {'tous':{'n':0,'votefi':0,'voteem':0}}
    stats = {'n':votes.count(),'pour':0,'contre':0,'abstention':0,'nonVotant':0,'absent':0,'votefi':0,'voteem':0,'diss':0,'exprime':0,'voteempct':0,'votefipct':0,'disspct':0}
    for v in votes:
        if v['position'] in ['pour','contre','abstention']:
            #positions[v['scrutin_id']] = v['position']
            stats['exprime'] += 1
        positions[v['scrutin_id']] = v['position']
        positions_ori[v['scrutin_id']] = v['position_ori']
        stats[v['position']] += 1
    
    stats['exprimepct'] = int(100*float(stats['exprime'])/stats['n'])
    scrutins = sorted(list(mdb.scrutins.find({'scrutin_id':{'$in':positions.keys()}})),key=lambda x:x['scrutin_num'],reverse=True)
    
    from collections import OrderedDict
    import datetime
    scrutins_dossiers = OrderedDict()
    calendrier = {}
    for s in scrutins:
        # calendrier
        poss = positions[s['scrutin_id']]
        cdat = datetime.datetime.strptime(s['scrutin_date'],'%d/%m/%Y').strftime('%Y-%m-%d')
        if not cdat in calendrier.keys():
            calendrier[cdat] = {'n':0,'v':0}
        calendrier[cdat]['n'] += 1 if poss!='nonVotant' else 0
        calendrier[cdat]['v'] += 1 if not poss in ['absent','nonVotant'] else 0
        
        diss = ( positions[s['scrutin_id']] != s['vote'][dep['groupe_abrev']]['sort']) and (not positions[s['scrutin_id']] in ['absent','nonVotant'])
        if diss:
            stats['diss'] += 1
        dosid = (s['scrutin_dossier'],s['scrutin_dossierLibelle'])
        if not dosid in scrutins_dossiers.keys():
            scrutins_dossiers[dosid] = []
        
        s['sort'] = 'adopté' if s['vote']['assemblee']['sort']=='pour' else 'rejeté'
        if not s['scrutin_dossier'] in dossiers.keys():
            dossiers[s['scrutin_dossier']]={'n':0,'votefi':0,'voteem':0}
        dossiers[s['scrutin_dossier']]['n'] += 1
        dossiers['tous']['n'] += 1

        for p in ['votefi','voteem']:
            if positions[s['scrutin_id']] == s[p]:
                dossiers[s['scrutin_dossier']][p] += 1
                dossiers['tous'][p] += 1
                stats[p] += 1
        
        s['flag'] = diss
        scrutins_dossiers[dosid].append(s)
        stats['disspct'] =  int(100*float(stats['diss'])/stats['exprime']) if stats['exprime']>0 else '-'
        stats['votefipct'] =  int(100*float(stats['votefi'])/stats['exprime']) if stats['exprime']>0 else '-'
        stats['voteempct'] =  int(100*float(stats['voteem'])/stats['exprime']) if stats['exprime']>0 else '-'
        if s['scrutin_desc'][:12]=="l'amendement":
            s['typedetail'] = 'amendement'
        elif s['scrutin_desc'][:9] =="la motion":
            s['typedetail'] = 'motion'
        elif s['scrutin_desc'][:27] =="l'ensemble du projet de loi":
            s['typedetail'] = 'loi'
        elif s['scrutin_desc'][:9] =="l'article":
            s['typedetail'] = 'article'
        elif s['scrutin_desc'][:14] ==u'la déclaration':
            s['typedetail'] = 'declaration'
        else:
            s['typedetail'] = 'autre'
        posscr = ""
        if s['votefi']==positions[s['scrutin_id']]:
            posscr += '_votefi'
        if s['voteem']==positions[s['scrutin_id']]:
            posscr += '_voteem'
        if s['flag']:
            posscr += '_dissidence'
        if positions[s['scrutin_id']]=='abstention':
            posscr += 'abstention'
        if positions[s['scrutin_id']] in ['absent','nonVotant']:
            posscr += 'absentnv'
        s['posscr'] = posscr
        s['absent'] =  (positions[s['scrutin_id']] in ['absent','nonVotant'])

        itvs = sorted(list(mdb.interventions.find({'acteur':a_id})),key=lambda x:(x['date'],-x['n']),reverse=True)

    calendrier = sorted([ dict(date=k,pct=float(v['v'])/v['n']) for k,v in calendrier.iteritems() if v['n']>0],key=lambda x:x['date']) 
    
    return dict(calendrier=calendrier,stats=dep['statsvote'],scrutins=scrutins_dossiers,positions=positions,positions_ori=positions_ori,dossiers=dossiers, itvs=itvs, **dep)


def nuages():
    lex = 'verbs' if request.args(0) == 'verbes' else 'noms'
    groupes = []
    for abrev,lib,nbm in [(g['libelleAbrev'],g['libelle'],g['nbmembres']) for g in mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]})] + [('assemblee','Assemblée',577)]:
        mots = mdb.mots.find_one({'acteur_id':abrev})
        groupes.append({'code':abrev,'libelle':lib,'nbmembres':nbm,'mots':mots['mots'][lex]}) 
    return dict(groupes=groupes)

def interventions():
    groupes = list(mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]}))
    itvs = 0
    mots = 0
    for g in groupes:
        itvs += g['nbitv']
        mots += g['nbmots']
    for g in groupes:
        g['ratio_itv'] = round((float(g['nbmots'])/mots)/(float(g['nbmembres'])/577),1)
        g['ratio_mots'] = round((float(g['nbitv'])/itvs)/(float(g['nbmembres'])/577),1)

    return dict(test=[(g['libelle'],g['ratio_itv'],g['ratio_mots']) for g in groupes],groupes=groupes,colors=[ colors[g['libelleAbrev']] for g in groupes])

def groupes():
    
    groupes = list(mdb.organes.find({'$and':[{'codeType':'GP'},{'viMoDe_dateFin':None}]}))
    tops = {'participation':[],'dissidence':[],'votefi':[],'voteem':[],'mots':[],'interventions':[]}
    for g in groupes:
            tops['participation'].append((g['libelle'],g['libelleAbrev'],round(100*float(g['statsvote']['exprime'])/g['statsvote']['n'],1)))
            tops['dissidence'].append((g['libelle'],g['libelleAbrev'],round(100*float(g['statsvote']['diss'])/g['statsvote']['exprime'],1)))
            tops['voteem'].append((g['libelle'],g['libelleAbrev'],round(100*float(g['statsvote']['voteem'])/g['statsvote']['exprime'],1)))
            tops['votefi'].append((g['libelle'],g['libelleAbrev'],round(100*float(g['statsvote']['votefi'])/g['statsvote']['exprime'],1)))
            tops['mots'].append((g['libelle'],g['libelleAbrev'],g['nbmots']/g['nbmembres']))
            tops['interventions'].append((g['libelle'],g['libelleAbrev'],g['nbitv']/g['nbmembres']))

    _tops = [{'titre':'Participation','icon':'vote','key':'participation','reverse':True,'unit':'%'},
            {'titre':'Dissidence','icon':'diss','key':'dissidence','reverse':True,'unit':'%'},
            {'titre':'FI-compatibilité','icon':'compfi','key':'votefi','reverse':True,'unit':'%'},
            {'titre':'EM-compatibilité','icon':'compem','key':'voteem','reverse':True,'unit':'%'},
            {'titre':'Mots par député','icon':'microphone','key':'mots','reverse':True,'unit':''},
            {'titre':'Interventions par député','icon':'microphone','key':'interventions','reverse':True,'unit':''},
           ]
    return dict(tops=tops,groupes=groupes,_tops=_tops)

def groupe():
    id = request.vars.get('id','welou')
    groupe = mdb.organes.find_one({'libelleAbrev':id})
    if not groupe:
        redirect(URL(c='default',f='notfound'))
    acteurs = list(mdb.acteurs.find({'uid':{'$in':groupe['membres'].keys()}}))
    tops = {}
    tops['participation'] = sorted([ (a,a['statsvote']['exprimepct']) for a in acteurs if a['statsvote']['exprime']>0],key=lambda x:x[1],reverse=True)
    tops['dissidence'] = sorted([ (a,a['statsvote']['disspct']) for a in acteurs if a['statsvote']['exprime']>15],key=lambda x:x[1],reverse=True)
    tops['voteem'] = sorted([ (a,a['statsvote']['voteempct']) for a in acteurs if a['statsvote']['exprime']>15],key=lambda x:x[1],reverse=True)
    tops['votefi'] = sorted([ (a,a['statsvote']['votefipct']) for a in acteurs if a['statsvote']['exprime']>15],key=lambda x:x[1],reverse=True)
    tops['mots'] = sorted([ (a,a['nbmots']) for a in acteurs ],key=lambda x:x[1],reverse=True)
    tops['interventions'] = sorted([ (a,a['nbitv']) for a in acteurs ],key=lambda x:x[1],reverse=True)
    
    _tops = [{'titre':'Participation','icon':'vote','key':'participation','unit':'%'},
            {'titre':'Dissidence','icon':'diss','key':'dissidence','unit':'%'},
            {'titre':'FI-compatibilité','icon':'compfi','key':'votefi','unit':'%'},
            {'titre':'EM-compatibilité','icon':'compem','key':'voteem','unit':'%'},
            {'titre':'Mots par député','icon':'microphone','key':'mots','unit':''},
            {'titre':'Interventions par député','icon':'microphone','key':'interventions','unit':''},
           ]
    return dict(acteurs=acteurs,tops=tops,_tops=_tops,**groupe)

def organe():
    id = request.vars.get('id','welou')
    organe = mdb.organes.find_one({'uid':id})
    if not organe:
        redirect(URL(c='default',f='notfound'))
    if organe['codeType']=='GP':
        redirect(URL('groupe',vars={'id':organe['libelleAbrev']}))
    return "TODO"
def depute2():
    return depute()
