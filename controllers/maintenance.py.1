# -*- coding: utf-8 -*-
# essayez quelque chose comme

import os
import json
import datetime
import csv
from tools import normalize
from pymongo import UpdateOne
from bson.son import SON
import xmltodict
mdb = client.obsass
output_path = os.path.join(request.folder, 'private', 'scrapy')

temp = """006-01,6.493408203125,6.37664794921875|006-03,14.3126220703125,7.4715576171875|059-01,7.8994140625,7.818737030029297|059-02,11.61602783203125,11.33016586303711|059-04,12.52130126953125,19.40857696533203|059-07,12.63165283203125,8.749279022216797|059-08,8.5286865234375,9.152809143066406|059-09,11.37884521484375,14.9644775390625|059-10,13.021728515625,10.51702880859375|044-01,15.29083251953125,11.30499267578125|044-02,9.2569580078125,8.15338134765625|033-01,8.7220458984375,9.77227783203125|033-02,6.56195068359375,6.9920654296875|033-03,8.413970947265625,11.29888916015625|067-01,8.50927734375,5.40191650390625|067-02,9.300537109375,12.658905029296875|067-03,12.5635986328125,9.820587158203125|031-01,18.72369384765625,11.25994873046875|031-04,11.35784912109375,8.2286376953125|077-01,20.041748046875,29.574462890625|077-02,55.762939453125,48.35894775390625|077-03,38.24456787109375,50.554290771484375|077-04,66.71246337890625,74.54544067382812|077-05,46.03594970703125,38.09814453125|077-06,44.3404541015625,28.127716064453125|077-07,23.1116943359375,33.638580322265625|077-08,15.83587646484375,24.436370849609375|077-09,31.0826416015625,27.680633544921875|077-10,8.634521484375,13.545928955078125|078-01,14.41070556640625,9.772796630859375|078-02,27.55230712890625,20.72149658203125|078-03,17.86993408203125,13.098175048828125|078-04,11.385009765625,12.36639404296875|078-05,8.677978515625,11.4881591796875|078-06,17.76153564453125,14.968231201171875|078-07,23.49822998046875,13.85333251953125|078-08,27.07061767578125,15.44677734375|078-09,43.27520751953125,51.524017333984375|078-10,38.71307373046875,52.679046630859375|078-11,12.57843017578125,14.18731689453125|078-12,30.104736328125,21.736724853515625|091-01,11.14739990234375,9.69525146484375|091-02,50.0306396484375,41.477508544921875|091-03,37.929931640625,29.18988037109375|091-04,28.11358642578125,18.198822021484375|091-05,15.87579345703125,13.925018310546875|091-06,13.7203369140625,8.145294189453125|091-07,7.476318359375,12.88629150390625|091-08,10.97943115234375,8.24713134765625|091-09,17.06854248046875,17.70458984375|091-10,9.73162841796875,7.150543212890625|095-01,63.8779296875,29.082778930664062|095-02,34.373291015625,20.500534057617188|095-03,14.38226318359375,16.093414306640625|095-04,8.26739501953125,8.901214599609375|095-05,7.9451904296875,8.086517333984375|095-06,11.951416015625,8.87872314453125|095-07,13.63018798828125,13.681732177734375|095-08,7.93524169921875,8.8834228515625|095-09,19.3382568359375,24.232513427734375|095-10,11.904296875,13.3543701171875|075-02,6.52423095703125,3.47186279296875|075-03,3.58111572265625,2.6015625|075-04,5.201416015625,4.2841796875|075-05,2.4998779296875,3.7408447265625|075-06,2.93243408203125,3.28961181640625|075-07,3.64874267578125,3.735565185546875|075-08,8.27288818359375,5.022003173828125|075-09,4.2098388671875,3.5894775390625|075-10,5.608154296875,2.214935302734375|075-11,2.67572021484375,3.75714111328125|075-12,3.77667236328125,3.277130126953125|075-13,4.11175537109375,3.224884033203125|075-14,5.8116455078125,5.542572021484375|075-15,2.77947998046875,3.73626708984375|075-16,3.4608154296875,3.9622802734375|075-17,3.00897216796875,3.319366455078125|075-18,2.32891845703125,2.882659912109375|092-01,9.8994140625,5.865478515625|092-02,7.23663330078125,4.1177978515625|092-03,4.7249755859375,4.87445068359375|092-05,4.1812744140625,3.7030029296875|092-06,5.21148681640625,3.825347900390625|092-07,6.4486083984375,8.9730224609375|092-08,9.1995849609375,9.113677978515625|092-09,3.31884765625,3.744659423828125|092-10,6.4671630859375,3.288330078125|092-11,4.6683349609375,5.238037109375|092-12,6.59161376953125,5.6070556640625|092-13,8.305419921875,7.76385498046875|093-01,6.69036865234375,8.60235595703125|093-02,5.58355712890625,6.964691162109375|093-03,8.51385498046875,9.1849365234375|093-04,9.8370361328125,7.224884033203125|093-05,5.5806884765625,6.42120361328125|093-06,5.2991943359375,5.276885986328125|093-07,5.84619140625,3.861785888671875|093-08,9.05694580078125,5.089569091796875|093-09,7.9725341796875,6.2486572265625|093-10,5.5377197265625,11.25341796875|093-11,8.55853271484375,11.33148193359375|093-12,8.16204833984375,7.55523681640625|094-01,6.352294921875,8.6678466796875|094-02,9.229736328125,10.099029541015625|094-03,19.623291015625,10.640411376953125|094-04,10.2091064453125,11.380340576171875|094-05,8.602783203125,6.927032470703125|094-06,7.5992431640625,3.626190185546875|013-05,3.3590087890625,4.348388671875|094-07,8.2696533203125,6.259368896484375|094-08,7.90472412109375,5.715240478515625|094-09,5.607666015625,6.165557861328125|094-10,6.6082763671875,4.709564208984375|094-11,4.921875,4.94085693359375|001-01,53.01519775390625,65.235107421875|001-02,63.58038330078125,29.185791015625|001-03,50.802490234375,98.65704345703125|001-04,48.66925048828125,58.3299560546875|001-05,49.37603759765625,83.13494873046875|002-01,79.5638427734375,58.52972412109375|002-02,34.70440673828125,46.52473449707031|002-04,32.40911865234375,54.51399230957031|002-05,67.3751220703125,86.12503051757812|003-01,97.26898193359375,79.3302001953125|003-02,73.3472900390625,82.18218994140625|003-03,76.118896484375,67.38238525390625|004-01,98.6815185546875,77.3958740234375|004-02,124.869140625,110.3062744140625|005-01,72.31024169921875,68.75579833984375|005-02,95.755859375,89.19158935546875|006-02,51.2060546875,79.48089599609375|006-04,38.1444091796875,59.28814697265625|006-05,54.99822998046875,84.5101318359375|006-06,12.58984375,11.854248046875|006-07,24.19403076171875,26.78125|006-08,16.56207275390625,14.84429931640625|006-09,13.6689453125,11.11444091796875|007-01,57.1058349609375,87.7576904296875|007-02,50.616943359375,60.33428955078125|007-03,62.87847900390625,74.23583984375|008-01,70.17926025390625,85.63113403320312|008-02,43.7685546875,61.37433624267578|008-03,86.53009033203125,75.14460754394531|009-01,114.65432739257812,61.24700927734375|009-02,87.2650146484375,52.02142333984375|010-01,89.69256591796875,90.89776611328125|010-02,83.70831298828125,52.110321044921875|010-03,59.13226318359375,46.93743896484375|011-01,62.66619873046875,64.04034423828125|011-02,37.6904296875,51.53533935546875|011-03,95.3480224609375,94.36907958984375|012-01,63.75665283203125,79.7388916015625|012-02,60.97576904296875,68.339111328125|012-03,90.25701904296875,93.3448486328125|013-08,33.38470458984375,27.64947509765625|013-09,21.85028076171875,20.24249267578125|013-10,27.94476318359375,23.14874267578125|013-11,18.64166259765625,26.9259033203125|013-12,26.5013427734375,26.874755859375|013-13,31.29217529296875,29.176025390625|013-14,39.57110595703125,38.176025390625|013-15,60.188720703125,39.4139404296875|013-16,70.75079345703125,67.0572509765625|014-01,27.6824951171875,16.791854858398438|014-02,26.418609619140625,14.079452514648438|014-03,79.92410278320312,56.37785339355469|014-04,68.40792846679688,43.765411376953125|014-05,72.41806030273438,45.66888427734375|014-06,90.939453125,55.08598327636719|015-01,59.75042724609375,59.8525390625|015-02,101.89166259765625,100.81756591796875|016-01,36.2420654296875,25.744384765625|016-02,77.6961669921875,74.53656005859375|016-03,98.97784423828125,75.03363037109375|017-01,45.03125,15.81243896484375|017-02,51.968505859375,55.96868896484375|017-03,62.88421630859375,61.60650634765625|017-04,89.50247192382812,74.77545166015625|017-05,65.6248779296875,55.34381103515625|018-01,72.589599609375,74.76776123046875|018-02,57.75982666015625,74.66583251953125|018-03,87.81353759765625,105.58139038085938|019-01,95.59136962890625,87.57025146484375|019-02,85.5079345703125,77.94842529296875|021-01,24.35198974609375,24.71539306640625|021-02,42.70477294921875,65.83160400390625|021-03,33.2381591796875,29.39459228515625|021-04,109.77099609375,105.50543212890625|021-05,109.78082275390625,52.562347412109375|022-01,35.272705078125,24.461761474609375|022-02,61.12188720703125,61.932159423828125|022-03,75.17941284179688,64.811279296875|022-04,63.15411376953125,75.60708618164062|022-05,66.0625,38.8751220703125|023-01,104.96795654296875,96.857177734375|024-01,66.11761474609375,41.20062255859375|024-02,87.36087036132812,54.79949951171875|024-03,116.00640869140625,77.456298828125|024-04,73.97686767578125,89.1199951171875|025-01,31.76776123046875,43.9969482421875|025-02,34.44659423828125,54.090118408203125|025-03,68.8306884765625,54.68121337890625|025-04,27.1868896484375,32.06396484375|025-05,74.9385986328125,91.03378295898438|026-01,16.25421142578125,32.2950439453125|026-02,29.29083251953125,69.2705078125|026-03,94.3182373046875,115.95159912109375|026-04,37.10174560546875,52.38177490234375|027-01,67.11959838867188,54.767333984375|027-02,61.81512451171875,67.56130981445312|027-03,53.977874755859375,79.29110717773438|027-04,58.295257568359375,35.8870849609375|029-02,14.290008544921875,11.630218505859375|069-06,5.232177734375,5.83526611328125|034-01,16.076904296875,20.7242431640625|044-04,25.412933349609375,16.119781494140625|027-05,48.92926025390625,57.28070068359375|028-01,37.36175537109375,61.85040283203125|028-02,66.72225952148438,56.5596923828125|028-03,62.748870849609375,59.16943359375|028-04,87.2286376953125,71.0133056640625|029-01,31.238677978515625,40.133941650390625|029-03,53.18754959106445,33.84375|029-04,58.281219482421875,51.468994140625|029-05,54.43760299682617,43.15643310546875|029-06,137.7812042236328,56.8123779296875|029-07,65.74989318847656,40.625|029-08,50.965545654296875,42.481048583984375|030-01,36.46539306640625,25.780029296875|030-03,34.1885986328125,47.718017578125|030-04,53.345703125,53.63958740234375|030-05,88.08807373046875,77.9678955078125|030-06,25.53057861328125,38.51824951171875|031-02,22.92559814453125,24.95819091796875|031-03,25.6480712890625,18.21875|031-05,40.8304443359375,31.88409423828125|031-06,35.70904541015625,44.15533447265625|031-07,45.95733642578125,55.51226806640625|031-08,66.01205444335938,92.444580078125|031-09,15.2421875,23.2493896484375|031-10,55.361572265625,46.07403564453125|032-01,115.47824096679688,65.418701171875|032-02,122.45101928710938,66.061767578125|033-04,22.93597412109375,28.51434326171875|033-05,58.859527587890625,92.17254638671875|033-06,24.9481201171875,27.56414794921875|033-07,21.267059326171875,17.94073486328125|033-08,41.65631103515625,45.68756103515625|033-09,89.28982543945312,68.51519775390625|033-10,65.4521484375,39.280029296875|033-11,68.95950317382812,46.94659423828125|033-12,60.29376220703125,53.65771484375|034-02,4.9447021484375,7.69073486328125|034-03,26.5523681640625,22.97515869140625|034-04,63.7034912109375,68.3140869140625|034-05,87.34442138671875,68.2142333984375|034-06,29.321044921875,25.62261962890625|034-07,43.99261474609375,30.2503662109375|034-08,17.81207275390625,29.4769287109375|034-09,26.80267333984375,20.52447509765625|035-01,18.7088623046875,20.46722412109375|035-02,47.832763671875,39.900909423828125|035-04,70.02952575683594,57.516693115234375|035-05,51.1129150390625,62.764892578125|035-06,59.607940673828125,57.02423095703125|035-07,42.15620422363281,32.53125|035-08,22.0216064453125,18.449920654296875|036-01,81.41949462890625,85.98724365234375|036-02,81.16021728515625,110.77490234375|037-01,6.856109619140625,11.121368408203125|037-02,49.341552734375,60.96966552734375|037-03,70.18154907226562,83.51556396484375|037-04,56.118194580078125,58.17974853515625|037-05,56.898590087890625,62.1024169921875|038-01,14.93560791015625,15.86669921875|038-02,16.5228271484375,25.4654541015625|038-03,14.50726318359375,17.4501953125|038-04,76.35968017578125,65.75921630859375|038-05,57.08807373046875,52.98046875|038-06,47.24755859375,38.10015869140625|038-07,69.9215087890625,42.32049560546875|038-08,33.91387939453125,37.09527587890625|038-09,49.34014892578125,48.97515869140625|038-10,54.5516357421875,27.45819091796875|039-01,47.28302001953125,83.62493896484375|039-02,49.1468505859375,77.33892822265625|039-03,66.31842041015625,58.937164306640625|040-02,50.23028564453125,47.3199462890625|040-03,89.12741088867188,76.17767333984375|041-01,37.65594482421875,52.614837646484375|041-02,85.477783203125,72.08154296875|041-03,86.50399780273438,84.91018676757812|042-01,19.3209228515625,10.3648681640625|042-02,11.0572509765625,8.6162109375|042-03,34.60333251953125,25.95709228515625|042-04,73.91650390625,49.72930908203125|042-05,63.304931640625,54.8115234375|042-06,66.39697265625,52.50872802734375|043-02,80.173828125,82.3206787109375|044-03,27.41357421875,21.532867431640625|044-05,41.918212890625,34.4627685546875|044-07,60.124298095703125,42.8028564453125|044-08,43.69700622558594,31.745330810546875|044-09,63.24017333984375,55.017486572265625|044-10,38.395294189453125,47.306182861328125|045-01,40.7197265625,25.667755126953125|045-02,40.81817626953125,42.747711181640625|045-03,106.8616943359375,50.9346923828125|045-04,53.9888916015625,51.577880859375|045-05,62.28704833984375,54.152374267578125|045-06,70.63714599609375,27.678619384765625|046-01,67.32452392578125,80.50146484375|046-02,68.1165771484375,87.61474609375|047-01,70.822265625,38.4610595703125|047-02,60.168182373046875,76.37652587890625|047-03,58.323577880859375,61.50128173828125|048-01,86.40325927734375,102.733642578125|049-01,28.470306396484375,42.23175048828125|049-02,50.832183837890625,48.808685302734375|049-03,61.6202392578125,70.37030029296875|049-04,66.90374755859375,49.5848388671875|049-05,56.305572509765625,25.07305908203125|049-06,67.15325927734375,50.72161865234375|049-07,62.216796875,49.35113525390625|050-01,51.6610107421875,101.50459289550781|050-02,74.68756103515625,52.12530517578125|050-03,57.354095458984375,99.47950744628906|050-04,61.095672607421875,25.441482543945312|051-01,38.439697265625,23.140182495117188|051-02,36.5487060546875,38.43125915527344|051-03,83.66912841796875,86.85308837890625|051-04,85.91925048828125,56.26275634765625|051-05,118.10760498046875,67.164306640625|052-01,104.81024169921875,90.749755859375|052-02,81.7386474609375,76.257568359375|053-01,69.56210327148438,70.76715087890625|053-02,86.86709594726562,51.149261474609375|053-03,81.2052001953125,76.93417358398438|054-01,29.20623779296875,19.6649169921875|054-02,12.4130859375,12.2386474609375|054-03,51.4073486328125,45.78138732910156|054-04,82.40997314453125,48.204925537109375|054-05,51.21673583984375,86.07431030273438|054-06,54.17999267578125,78.52682495117188|055-01,81.99951171875,86.946044921875|055-02,74.87408447265625,85.595703125|056-01,50.4375,31.21875|056-02,42.96870422363281,73.53125|056-03,58.517547607421875,67.80990600585938|056-04,52.88938903808594,92.41574096679688|056-05,19.21875,22.15618896484375|056-06,72.67903137207031,59.95037841796875|057-01,19.60870361328125,25.097625732421875|057-02,36.7672119140625,32.525177001953125|057-03,30.8970947265625,45.21623229980469|057-04,87.371337890625,71.27203369140625|057-05,69.11517333984375,33.61158752441406|057-06,21.35455322265625,23.409561157226562|057-07,37.81036376953125,56.63084411621094|057-08,25.62066650390625,35.80982971191406|057-09,44.4779052734375,37.528411865234375|058-01,67.80596923828125,87.99435424804688|058-02,108.1409912109375,116.96127319335938|059-03,44.17608642578125,51.384376525878906|059-05,29.6544189453125,18.040042877197266|059-06,30.65643310546875,30.90625|059-11,20.6533203125,18.84168243408203|059-12,67.26165771484375,43.164642333984375|059-13,17.800537109375,11.709449768066406|059-14,47.803466796875,42.12982177734375|059-15,47.3939208984375,40.458168029785156|059-16,22.255615234375,18.58831024169922|059-17,23.2791748046875,25.895355224609375|059-18,60.84368896484375,33.62504577636719|059-19,28.6251220703125,24.076637268066406|059-20,26.44732666015625,22.492881774902344|059-21,26.84368896484375,26.281356811523438|060-01,66.1849365234375,43.84527587890625|060-02,50.38507080078125,78.42076110839844|060-03,46.760009765625,21.851669311523438|060-04,65.65924072265625,36.842193603515625|060-05,48.03131103515625,44.78120422363281|060-06,42.7005615234375,42.59757995605469|060-07,33.8243408203125,29.985092163085938|061-01,111.57894897460938,42.509246826171875|061-02,77.57955932617188,101.81527709960938|061-03,94.164306640625,42.10931396484375|062-01,101.38385009765625,58.24737548828125|062-02,31.4219970703125,24.303756713867188|062-03,15.74530029296875,14.519989013671875|062-04,57.15325927734375,50.270957946777344|062-05,27.72662353515625,30.197525024414062|062-06,73.9820556640625,68.13113403320312|062-07,43.43048095703125,24.959571838378906|062-08,36.972900390625,43.62693405151367|062-09,36.875,24.437347412109375|062-10,26.699462890625,24.061538696289062|062-11,19.59881591796875,18.185440063476562|062-12,19.14617919921875,29.13788604736328|063-01,18.7801513671875,16.159912109375|063-02,92.56756591796875,85.842041015625|063-03,60.1358642578125,67.3807373046875|063-04,41.4091796875,57.48345947265625|063-05,70.5859375,83.46722412109375|064-01,19.057220458984375,28.72686767578125|064-02,36.168426513671875,48.0030517578125|064-03,89.26025390625,51.09954833984375|064-04,103.30526733398438,79.976806640625|064-05,44.137725830078125,25.03900146484375|064-06,39.45068359375,28.2677001953125|065-01,51.26910400390625,82.97979736328125|065-02,50.99969482421875,107.9072265625|066-01,15.98455810546875,13.9105224609375|066-02,61.33648681640625,37.4835205078125|066-03,100.97528076171875,49.3358154296875|066-04,72.81207275390625,38.6806640625|067-05,50.052490234375,46.743927001953125|067-06,46.1334228515625,42.21588134765625|067-07,62.202392578125,56.475189208984375|067-08,63.303955078125,48.307342529296875|067-09,33.2998046875,34.78302001953125|068-01,26.0150146484375,33.3759765625|068-02,42.109619140625,53.312530517578125|068-03,49.97900390625,37.936065673828125|068-04,62.85980224609375,42.552734375|068-05,23.94970703125,13.36981201171875|068-06,32.4376220703125,33.48516845703125|069-05,17.9217529296875,19.58795166015625|069-08,47.50152587890625,54.54302978515625|069-09,35.4434814453125,57.148193359375|069-10,40.077392578125,32.199951171875|069-11,43.76934814453125,29.81085205078125|069-13,19.57806396484375,18.67279052734375|070-01,76.27984619140625,96.17861938476562|070-02,66.82928466796875,79.12124633789062|071-01,45.64556884765625,56.658447265625|071-02,84.67657470703125,73.4322509765625|071-03,119.58184814453125,65.58465576171875|071-04,64.74951171875,67.18756103515625|071-05,62.7659912109375,37.70318603515625|072-01,40.759674072265625,56.86572265625|072-02,44.69976806640625,37.393280029296875|072-03,96.76693725585938,55.8951416015625|072-04,54.620452880859375,45.288055419921875|072-05,71.73080444335938,65.74053955078125|073-01,35.5791015625,66.950439453125|073-02,68.583984375,79.78485107421875|073-03,109.680908203125,65.9405517578125|073-04,48.837158203125,32.7491455078125|074-01,41.46307373046875,32.90069580078125|074-02,50.80242919921875,38.61651611328125|074-03,46.58709716796875,42.79022216796875|074-04,46.68798828125,40.93536376953125|074-05,53.13348388671875,33.18951416015625|074-06,49.453369140625,58.2279052734375|076-01,10.217529296875,7.610748291015625|076-02,59.08740234375,40.196441650390625|076-03,8.62384033203125,14.769454956054688|076-04,24.859893798828125,30.809326171875|076-05,60.89239501953125,37.700103759765625|076-06,79.58724975585938,68.58152770996094|076-07,18.070068359375,17.572402954101562|076-08,16.4368896484375,10.977294921875|076-09,50.68292236328125,50.87150573730469|076-10,82.2783203125,53.10304260253906|079-01,40.529815673828125,66.98358154296875|079-02,82.75692749023438,100.49755859375|079-03,79.55966186523438,61.1287841796875|080-01,55.56494140625,42.158897399902344|080-02,26.7965087890625,21.5078125|080-03,69.53759765625,76.4383544921875|080-04,85.60888671875,88.07488250732422|080-05,70.50054931640625,69.81544494628906|081-01,75.0909423828125,74.31890869140625|081-02,70.15203857421875,60.4111328125|081-03,86.52459716796875,49.80328369140625|082-01,69.595703125,53.45574951171875|082-02,62.133697509765625,74.03509521484375|083-01,8.44000244140625,5.68597412109375|083-02,25.12139892578125,16.94970703125|083-03,45.09381103515625,28.593017578125|083-04,47.6895751953125,49.9620361328125|083-05,35.00201416015625,26.10467529296875|083-06,49.2054443359375,48.78009033203125|083-07,19.052490234375,13.68310546875|083-08,106.683837890625,44.10345458984375|084-01,16.30133056640625,12.84796142578125|084-02,47.7032470703125,34.7034912109375|084-03,36.34686279296875,20.41522216796875|084-04,62.68780517578125,46.99981689453125|084-05,71.58807373046875,60.81268310546875|085-01,82.14080810546875,50.19342041015625|085-02,71.08474731445312,63.8990478515625|085-03,63.25001525878906,70.6875|085-04,58.93267822265625,50.99700927734375|085-05,71.26498413085938,60.36505126953125|086-01,57.788116455078125,40.5272216796875|086-02,54.312744140625,44.17144775390625|086-03,106.79095458984375,90.42242431640625|086-04,85.42355346679688,60.044830322265625|087-01,57.253662109375,55.259521484375|087-02,81.8704833984375,67.51788330078125|087-03,64.00506591796875,75.94122314453125|088-01,51.11187744140625,66.62728881835938|088-02,56.66571044921875,58.652557373046875|088-03,55.55572509765625,42.20367431640625|088-04,85.1258544921875,74.09469604492188|089-01,77.44036865234375,65.9468994140625|089-02,76.94793701171875,104.65896606445312|089-03,69.6839599609375,62.665863037109375|090-02,23.78240966796875,35.145782470703125|069-01,8.07366943359375,8.3428955078125|069-02,4.808837890625,7.5111083984375|069-03,4.81561279296875,5.11444091796875|069-04,5.036376953125,7.37237548828125|069-07,9.02130126953125,17.02703857421875|069-12,11.23486328125,17.43115234375|069-14,13.67840576171875,11.94366455078125|013-01,10.56805419921875,8.07830810546875|013-02,5.04046630859375,10.03204345703125|013-03,7.5457763671875,9.1104736328125|013-04,4.0513916015625,5.28790283203125|013-06,12.20343017578125,10.65667724609375|013-07,10.701416015625,8.393310546875|077-11,12.427490234375,17.232879638671875|002-03,79.9085693359375,60.56364440917969|043-01,54.87188720703125,65.75360107421875|044-06,100.43942260742188,63.05914306640625|090-01,25.7894287109375,34.22698974609375|092-04,5.5499267578125,7.984100341796875|035-03,56.99784851074219,56.499298095703125|040-01,129.2379150390625,88.5791015625|075-01,5.05078125,3.995513916015625|030-02,41.23553466796875,47.04522705078125|067-04,24.8720703125,36.213043212890625"""

def correct():
    for id,w,h in test.split('|'):
        mdb.update({'id':id},{'$set':{'w':w,'h':h}})
    return json.dumps(test.split('|'))
# ---------------------
# Helpers
# ---------------------
def formatpct(n,d,prec=1):
    return round(float(n)/d,prec)
def updateCircos():
    paris = ['077-01','077-02','077-03','077-04','077-05','077-06','077-07','077-08','077-09','077-10','077-11','078-01','078-02','078-03','078-04','078-05','078-06','078-07','078-08','078-09','078-10','078-11','078-12','091-01','091-02','091-03','091-04','091-05','091-06','091-07','091-08','091-09','091-10','095-01','095-02','095-03','095-04','095-05','095-06','095-07','095-08','095-09','095-10','092-01','092-02','092-03','092-04','092-05','092-06','092-07','092-08','092-09','092-10','092-11','092-12','092-13','093-01','093-02','093-03','093-04','093-05','093-06','093-07','093-08','093-09','093-10','093-11','093-12','094-01','094-02','094-03','094-04','094-05','094-06','094-07','094-08','094-09','094-10','094-11','075-01','075-02','075-03','075-04','075-05','075-06','075-07','075-08','075-09','075-10','075-11','075-12','075-13','075-14','075-15','075-16','075-17','075-18']
    villes = ['075-01','075-02','075-03','075-04','075-05','075-06','075-07','075-08','075-09','075-10','075-11','075-12','075-13','075-14','075-15','075-16','075-17','075-18','069-01','069-02','069-03','069-04','069-06','069-07','069-12','069-14','013-01','013-02','013-03','013-04','013-05','013-06','013-07','044-01','044-02','033-01','033-02','033-03','031-01','031-04','006-01','006-03','067-01','067-02','067-03','059-01','059-02','059-04','059-07','059-08','059-09','059-10']
    circopath = os.path.join(request.folder, 'private','circonscriptions_france2.svg')
    svg = xmltodict.parse(open(circopath,'r'))
    for c in svg['svg']['path']:
        circo = dict(ville=(c['@id'] in villes),paris=(c['@id'] in paris),carte='france',d=c['@d'],id=c['@id'],dep=c['@id'].split('-')[0],title=c['title']['#text'],desc=c['desc']['#text'])
        mdb.circonscriptions.update({'id':c['@id']},{'$set':circo},upsert=True)
    return "ok"
def test():
    
    circos = list(mdb.circonscriptions.find())
    
        
    return dict(circos=circos)

def launchScript(name,params=""):
    fp = os.path.join(request.folder, 'private/scripts', name +'.py '+output_path+' '+params)
    
    did_scrape = True
    if not 'debug' in request.args:
        did_scrape = True if os.system(fp) else False

    return did_scrape

def getData(name,id):
    fp = os.path.join(request.folder, 'private/data/', name +'.csv')
    with open(fp) as csvfile:
        reader = csv.DictReader(csvfile,delimiter='|')
        result = dict((row[id].decode('utf8'),dict((k,v.decode('utf8')) for k,v in row.iteritems())) for row in reader)
    return result
def addData(name,elts):
    fp = os.path.join(request.folder, 'private/data/', name +'.csv')
    with open(fp,'a') as f:
        f.write('|'.join([e.encode('utf8') for e in elts])+'\n')
    
def getJson(name):
    return json.loads(open(output_path+'/'+name+'.json','r').read())



def genNuages(_mots):
    mts = {}
    for lex in _mots.keys():
        if _mots[lex]:
            mots = [ [mot,count] for mot,count in sorted(_mots[lex].items(),key=lambda x:x[1],reverse=True) if not mot in nuages_excl][:200]
            if mots:
                mx = mots[0][1]
                mn = mots[-1][1]-1
                coef = 12000/sum([len(mot)*(float(count-mn)/(mx-mn))**2 for mot,count in mots])
                mts[lex] = [ [mot,int(coef*float(count-mn)/(mx-mn))] for mot,count in mots]
        
    return mts

# ---------------------
# Imports de données
# ---------------------

def updateAssemblee():
    updateHATVP()
    updateDeputyWatch()
    launchScript('assemblee')
    deputes = getJson('deputes')
    deputywatch = getJson('deputywatch')
    departements = getData('departements','departement')
    professions = getData('deputes_professions','id')
    professions2 = getData('deputes_professions','profession')
    hatvp = getJson('hatvp')
    csp_incomplet = []
    for d in deputes:
        d['depute_sexe'] = 'Homme' if d['depute_nom']=='M.' else 'Femme'
        d['depute_id'] = normalize(d['depute_nom'])
        d['depute_age'] = int((datetime.datetime.now() - datetime.datetime.strptime(d['depute_ddn'],'%d/%m/%Y')).days / 365.25)
        d['depute_classeage'] = '%d-%d ans' % ((d['depute_age']/10)*10,(1+(d['depute_age']/10))*10)
        d['depute_deputywatch'] = deputywatch.get(d['depute_id'],None)
        d['depute_hatvp'] = hatvp.get(d['depute_id'],[])
        d['depute_region'] = departements[d['depute_departement']]['region']
        d['depute_typeregion'] = departements[d['depute_departement']]['typeregion']
        d['depute_departement_id'] = departements_ids[d['depute_departement']]
        d['depute_circo_id'] = d['depute_departement_id']+'-'+('00'+d['depute_circo'])[-2:]
        m = professions.get(d['depute_uid'],None)
        if not m:
            m = professions2.get(d['depute_profession'],None)
        csp = ""
        if m:
            csp = m['csp']
       
        if not csp and not d['depute_uid'] in professions.keys():
            addData('deputes_professions',(d['depute_uid'],d['depute_nom'],d['depute_profession'],''))
            
        d['depute_csp'] = csp
        mdb.deputes.update_one({'depute_uid': d['depute_uid']}, {'$set': d}, upsert = True)
    
    groupes = getJson('groupes')
    for g in groupes:
        membres = mdb.deputes.find({'groupe_uid':g['groupe_uid']})
        g['groupe_membres'] = [ dict(qualite=m['groupe_qualite'],uid=m['depute_uid'],actif = m['depute_actif']) for m in membres]
        g['groupe_nbmembres'] = len([ m for m in g['groupe_membres'] if m['actif']])
        mdb.groupes.update_one({'groupe_uid':g['groupe_uid']},{'$set':g}, upsert= True)
    
    # initialise les champs stats
    mdb.deputes.update_many({'stats':None},{'$set':{'stats':{'nbmots':0,'nbitvs':0}}})
    mdb.groupes.update_many({'stats':None},{'$set':{'stats':{'nbmots':0,'nbitvs':0}}})
    
    return mdb.deputes.find().count()

def updateDeputyWatch():
    launchScript('deputywatch')

def updateHATVP():
    types_doc = {
     'dia': u'Déclaration d’intérêts et d’activités',
     'diam': u'Déclaration de modification substantielle des intérêts et des activités',
     'di': u'Déclaration d’intérêts',
     'dim': u'Déclaration de modification substantielle des intérêts',
     'dsp': u'Déclaration de situation patrimoniale',
     'dspm': u'Déclaration de modification substantielle de situation patrimoniale',
     'dspfm': u'Déclaration de modification substantielle de situation patrimoniale',
     'appreciation': u'Appréciation de la HATVP'
    }

    import requests
    import csv
    import json
    from cStringIO import StringIO
    from tools import normalize
    r = requests.get('http://www.hatvp.fr/files/open-data/liste.csv')
    f = StringIO(r.content)
    csv = csv.DictReader(f, delimiter=';', quotechar='"')
    declarations = {}
    for row in csv:
        drow = dict((k,v.decode('utf8') if isinstance(v,basestring) else v) for k,v in row.iteritems())
        id = normalize(drow['civilite']+' '+drow['prenom']+' '+drow['nom'])
        drow['docurl'] = 'http://www.hatvp.fr/livraison/dossiers/'+drow['nom_fichier']
        drow['typedoc'] = types_doc[drow['type_document']]
        declarations[id] = declarations.get(id,[])+ [drow]

    with open(output_path+'/hatvp.json','w') as f:
        f.write(json.dumps(declarations))

def updateSessions():
    if 'rebuild' in request.args:
        mdb.interventions.remove()
        mdb.deputes.update_many({},{'$set':{'depute_mots':{},'depute_nuages':{},'stats.nbmots':0,'stats.nbitvs':0}})
        
    lexiques_path = os.path.join(request.folder, 'private','lexiques.json')

    with open(lexiques_path,'r') as f:
        lexiques = json.loads(f.read())

    lexiquenoms = lexiques['NOM']
    #lexiquenoms.update(lexiques['ADV'])
    lexiquenoms.update(lexiques['ADJ'])
    lexiqueverbes = lexiques['VER']
    _lexiques = {'noms':lexiquenoms,'verbes':lexiqueverbes}
    _lex = {'noms':set(_lexiques['noms'].keys()),
            'verbes':set(_lexiques['verbes'].keys()) }

    def countWords(txt):
        words = {'noms':{},'verbes':{}}
        txt = txt.replace('\n',' ').replace('.',' ').replace(':',' ').replace(',',' ').replace(';',' ').replace('-',' ').replace('  ',' ').replace(u'\xa0','').replace(u'\u2019',' ').lower().split(' ')
        for lex in _lexiques.keys():
            _words = [ _lexiques[lex][x] for x in txt if x in _lex[lex] ]
            for w in _words:
                if not w.strip():
                    continue
                if not w in words[lex].keys():
                    words[lex][w] = 1
                else:
                    words[lex][w] += 1

        return words
    
    def addWords(w1,w2):
        for k in w2.keys():
            if not k in w1.keys():
                w1[k] = w2[k]
            else:
                for mot,n in w2[k].iteritems():
                    w1[k][mot] = w1[k].get(mot,0) + n
        
    exclude = mdb.interventions.distinct('session_id')
    launchScript('sessions',"'%s'" % (json.dumps(exclude)))
    sessions = getJson('sessions')
    scrutins = list(mdb.scrutins.find())
    for s in scrutins:
        if s['scrutin_typedetail']=='amendement' and 'scrutin_ref' in s.keys():
            cptrd = s['scrutin_ref']['urlCompteRenduRef'].split('#')[0]
            if cptrd in sessions.keys():
                balises = sessions[cptrd]
                bal = balises.get(s['scrutin_ref']['numAmend'],'')
                s['scrutin_ref']['urlCompteRenduRef'] = cptrd + '#' + bal
                mdb.scrutins.update_one({'scrutin_id': s['scrutin_id']}, {'$set': {'scrutin_ref': s['scrutin_ref']}})


    deputes = dict((a['depute_id'],{'uid':a['depute_uid'],'mots':a['depute_mots'],'stats':a['stats']}) for a in mdb.deputes.find())
    interventions = getJson('interventions')
    for itv in interventions:
        for n,depid in enumerate(itv['depute_id'].split(u'|')):
            new_itv=dict(itv)
            new_itv['depute_id'] = depid
            nid = deputes.get(depid,None)
            if nid and nid['uid'] != new_itv['depute_uid']:
                new_itv['depute_uid'] = nid['uid']
            new_itv['mots'] = countWords(new_itv['itv_contenu_texte'])
            new_itv['itv_id'] = "%s%d" % (new_itv['itv_id'],n)
            mdb.interventions.update_one({'itv_id':new_itv['itv_id']},{'$set':new_itv}, upsert=True)
            if new_itv['depute_id'] in deputes.keys():
                deputes[new_itv['depute_id']]['stats']['nbmots'] += new_itv['itv_nbmots']
                deputes[new_itv['depute_id']]['stats']['nbitvs'] += 1
                addWords(deputes[new_itv['depute_id']]['mots'],new_itv['mots'])



    for d in mdb.deputes.find():
        if d['depute_id'] in deputes.keys():
            mdb.deputes.update_one({'depute_id':d['depute_id']},
                                   {'$set':{'depute_mots':deputes[d['depute_id']]['mots'],
                                            'depute_nuages':genNuages(deputes[d['depute_id']]['mots']),
                                            'stats':deputes[d['depute_id']]['stats']}})

def updateScrutins():
    _scrutins = {}
    if 'rebuild' in request.args:
        mdb.votes.remove()
        mdb.scrutins.remove()
    
    # TODO : fonctionnalité import PDF à conserver ?
    #_scrutins = get_scrutinsPDFs()
    #fp = os.path.join(current.request.folder, 'private/scripts', 'scrutins.py')
    #did_scrape = True if os.system(fp) else False

    scrutins_complets = [ s['scrutin_id'] for s in list(mdb.scrutins.find({'$and':[{'scrutin_dossier':{'$ne':'N/A'}},{'scrutin_type':{'$ne':'N/A'}}]}))]
    launchScript('scrutins',"'"+json.dumps(scrutins_complets)+"'")
    _scrutins.update(getJson('scrutins'))

    votes = []
    scrutins = []
    
    deputes = dict((d['depute_id'],d) for d in mdb.deputes.find())
    
    def act_votedata(id,position,posori=None):
        d = deputes[id]
        return {'depute_uid':d['depute_uid'],
                'depute_nom':d['depute_nom'],
                'groupe_uid': d['groupe_uid'],
                'groupe_abrev': d['groupe_abrev'],
                'depute_age':d['depute_age'],
                'depute_classeage':d['depute_classeage'],
                'depute_region':d['depute_region'],
                'depute_typeregion':d['depute_typeregion'],
                'depute_departement':d['depute_departement'],
                'depute_csp':d['depute_csp'],
                'depute_sexe':d['depute_sexe'],
                'vote_position':position,
                'vote_position_ori':posori }

    for s in _scrutins.values():
        desc = s['desc'].replace('.[','.')
        types = s.get('libelleType','N/A')
        fulldesc = u"Scrutin n° %d du %s : %s" % (s[u'num'],s[u'date'],desc)
        scrutin = { 'scrutin_num':s['num'],
                    'scrutin_id':s['id'],
                    'scrutin_desc':desc,
                    'scrutin_fulldesc':fulldesc,
                    'scrutin_date':s['date'],
                    'scrutin_type':s.get('type','N/A'),
                    'scrutin_typeLibelle':types,
                    'scrutin_dossier':s.get('idDossier','N/A'),
                    'scrutin_dossierLibelle':s.get('libelleDossier','N/A'),
                    'scrutin_typedetail':s['typedetail'],
                    'scrutin_ok':s['ok']
                   }
        
        exprimes = []
        for p in s['votes'].keys():
            for v in s['votes'][p]:
                vote = dict(scrutin)
                depute = deputes.get('m.'+v,deputes.get('mme'+v,deputes.get(v,'PB')))
                if depute == 'PB':
                    print v.encode('utf8')
                else:
                    exprimes.append(depute['depute_id'])
                    if p=='nonVotant':
                        continue
                    corr = s['corrections'].get('m.'+v,s['corrections'].get('mme'+v,False))
                    if corr:
                        position = corr
                        posori = p
                    else:
                        position = p
                        posori = p
                    vote.update(act_votedata(depute['depute_id'],position,posori))
                    vote['vote_id'] = "%d_%s" % (s['num'],depute['depute_id'])
                    votes.append(vote)
        for depcorr,pos in s['corrections'].iteritems():
            if not depcorr in exprimes:
                vote = dict(scrutin)
                vote.update(act_votedata(depcorr,pos,'absent'))
                vote['vote_id'] = "%d_%s" % (s['num'],depcorr)
                votes.append(vote)
                exprimes.append(depcorr)
                    
        for id in list(set(deputes.keys())-set(exprimes)):
            datescrutin = datetime.datetime.strptime(s['date'],'%d/%m/%Y')
            depute = deputes[id]
            
            if (depute['depute_mandat_debut'] and datetime.datetime.strptime(depute['depute_mandat_debut'],'%d/%m/%Y')>datescrutin) or (depute['depute_mandat_fin'] and datetime.datetime.strptime(depute['depute_mandat_fin'],'%d/%m/%Y')<datescrutin):
                
                continue

            vote = dict(scrutin)
            vote.update(act_votedata(id,'absent'))
            vote['vote_id'] = "%d_%s" % (s['num'],id)
            votes.append(vote)
        if 'reference' in s.keys():
            scrutin.update({'scrutin_ref':s['reference']})
        scrutin.update({  'scrutin_lienscrutin':s['scrutinlien'],
                            'scrutin_liendossier':s['dossierlien'] })
        scrutins.append(scrutin)

    

    scrutins_incomplets = [ s['scrutin_id'] for s in list(mdb.scrutins.find({'$or':[{'scrutin_dossier':'N/A'},{'scrutin_type':'N/A'}]}))]

    mdb.votes.remove({'scrutin_id':{'$in':scrutins_incomplets}})
    mdb.scrutins.remove({'scrutin_id':{'$in':scrutins_incomplets}})

    # stockage des votes et des scrutins dans la base
    if votes:
        mdb.votes.create_index([('vote_id', pymongo.ASCENDING)], unique = True)
        #mdb.votes.insert_many(votes)
        for v in votes:
            mdb.votes.insert(v)

    if scrutins:
        mdb.scrutins.create_index([('scrutin_id', pymongo.ASCENDING)], unique = True)
        mdb.scrutins.insert_many(scrutins)
    
    updateScrutinsStats()
    updateDeputesStats()
        
def updateDeputesStats():
    pgroup = dict((g,{'$sum':'$vote_compat.'+g}) for g in mdb.groupes.distinct('groupe_abrev'))
    pgroup['_id'] = {'depute':'$depute_uid'}
    pipeline = [
        {"$group": pgroup },
    ]
    deputes = {}
    for compat in list(mdb.votes.aggregate(pipeline)):
        depuid = compat['_id']['depute']
        del compat['_id']
        deputes[depuid] = {'depute_compat':compat, 'depute_positions':{} }
    
    pipeline = [
        {"$group":{'_id': {'depute':'$depute_uid','position':'$vote_position'}, 'n':{'$sum':1}}},
        {"$sort": SON([("_id.depute",1)])}
    ]
    
    for p in list(mdb.votes.aggregate(pipeline)):
        uid = p['_id']['depute']
        deputes[uid]['depute_positions'][p['_id']['position']] = p['n']
    ops = []
    for uid,dep in deputes.iteritems():
        dep['depute_positions']['total'] = sum(dep['depute_positions'].values())
        dep['depute_positions']['exprimes'] = dep['depute_positions']['total'] - dep['depute_positions'].get('absent',0)
        ops.append(UpdateOne({'depute_uid':uid},{'$set':dep}))

    if ops:
        mdb.deputes.bulk_write(ops)

    return json.dumps(deputes)


def updateScrutinsStats():
    if 'rebuild' in request.args:
        mdb.votes.update_many({},{'$set':{'vote_compat':None}})

    # decomptes positions par scrutin, par groupe, par position
    pipeline = [
        {"$match":{'vote_compat':None}},
        {"$group":{'_id': {'position':'$vote_position','scrutin':'$scrutin_id','groupe':'$groupe_abrev'},'total':{'$sum':1}}}, 
        {"$sort": SON([("_id.scrutin",1),("_id.groupe",1),("total",-1),("_id.position",1)])},
        
    ]

    # Stats scrutins
    scrutins = {}

    scrutin_id = None
    for r in list(mdb.votes.aggregate(pipeline)):
        if r['_id']['scrutin'] != scrutin_id:
            scrutin_id = r['_id']['scrutin']
            scrutins[scrutin_id] = {}
            scrutins[scrutin_id]['positions'] = {'assemblee':{'pour':0,'contre':0,'abstention':0,'absent':0}}
            scrutins[scrutin_id]['compats'] = {}
            groupe = None
        position = r['_id']['position']
        if r['_id']['groupe'] != groupe:
            groupe = r['_id']['groupe']
            scrutins[scrutin_id]['positions'][groupe] = {'position':''}
            scrutins[scrutin_id]['compats'][groupe] = ''
        if position != 'absent' and scrutins[scrutin_id]['positions'][groupe]['position']=='':
            scrutins[scrutin_id]['positions'][groupe]['position'] = position
            scrutins[scrutin_id]['compats'][groupe] = position
        scrutins[scrutin_id]['positions'][groupe][position] = r['total']
        scrutins[scrutin_id]['positions']['assemblee'][position] += r['total']
    # Complements stats
    groupes = mdb.groupes.distinct('groupe_abrev')
    groupe_init = dict((abr,0) for abr in groupes+['assemblee'])
    ops = []
    for sid,scrutin in scrutins.iteritems():
        tri = sorted([(k,v) for k,v in scrutin['positions']['assemblee'].iteritems() if k!='absent'], key=lambda x:x[1], reverse=True)
        asspos = tri[0][0] if len(tri)>0 else ''
        scrutin['positions']['assemblee']['position'] = asspos
        scrutin['compats']['assemblee'] = asspos
        
        compatpos = { 'absent':groupe_init }
        for pos in ('pour','contre','abstention'):
            compatpos[pos] = dict((g,1 if scrutin['compats'][g]==pos else 0) for g in groupes+['assemblee'])
        scrutin['compatpos'] = compatpos
        for g in groupes+['assemblee']:
            scrutin['positions'][g]['exprimes'] = scrutin['positions'][g].get('pour',0) + scrutin['positions'][g].get('contre',0) + scrutin['positions'][g].get('abstention',0)
            scrutin['positions'][g]['total'] = scrutin['positions'][g]['exprimes'] + scrutin['positions'][g].get('absent',0) 
        scrutin['sort'] = u'adopté' if scrutin['positions']['assemblee']['position']=='pour' else u'rejeté'
        ops.append(UpdateOne({'scrutin_id':sid},{'$set':{'scrutin_positions':scrutin['positions'], 'scrutin_compats':scrutin['compats'], 'scrutin_sort':scrutin['sort']}}))
    
    if ops:
        mdb.scrutins.bulk_write(ops)
    ops = []
    for v in mdb.votes.find({'scrutin_id':{'$in':scrutins.keys()}}):
        ops.append(UpdateOne({'vote_id':v['vote_id']},{'$set':{'vote_compat':scrutins[v['scrutin_id']]['compatpos'][v['vote_position']]}}))
    if ops:
        mdb.votes.bulk_write(ops)        
        

    return "OK"
